[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"Mosaic",[{"hash":2819101186,"record":null,"name":"Mosaic|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLUR\n  uniform outLineWidth{\n    vec2 upPos;\n    vec2 downPos;\n    float powerX;\n    float powerY;\n    float colorHeight;\n  };\n  float ratioX = 1000.0-((60.0+powerX*.4)*9.9);\n  float ratioY = 1000.0-((60.0+powerY*.4)*9.9);\n  float icolorHeight = 1.0/colorHeight;\n  float halfColorHeight = 0.5*icolorHeight;\n#endif\nvoid main () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 o2 = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BLUR\n    if(v_uv0.x>downPos.x*.01&&v_uv0.y>downPos.y*.01&&v_uv0.x<upPos.x*.01&&v_uv0.y<upPos.y*.01){\n      vec2 uv = vec2(1.0/ratioX*(floor(ratioX*v_uv0.x)+.5),1.0/ratioY*(floor(ratioY*v_uv0.y)+.5));\n      o2 = texture(texture,uv);\n      o.x=icolorHeight*(floor(colorHeight*o2.x)+halfColorHeight);\n      o.y=icolorHeight*(floor(colorHeight*o2.y)+halfColorHeight);\n      o.z=icolorHeight*(floor(colorHeight*o2.z)+halfColorHeight);\n      o.w=o2.w>0.5?1.0:0.0;\n    }\n    #if USE_NOWHITE\n      if(o.x*o.y*o.z>0.94){\n        o.w = 0.0;\n      }\n    #endif\n  #endif\n    o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLUR\n  uniform vec2 upPos;\nuniform vec2 downPos;\nuniform float powerX;\nuniform float powerY;\nuniform float colorHeight;\n  float ratioX = 1000.0-((60.0+powerX*.4)*9.9);\n  float ratioY = 1000.0-((60.0+powerY*.4)*9.9);\n  float icolorHeight = 1.0/colorHeight;\n  float halfColorHeight = 0.5*icolorHeight;\n#endif\nvoid main () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 o2 = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BLUR\n    if(v_uv0.x>downPos.x*.01&&v_uv0.y>downPos.y*.01&&v_uv0.x<upPos.x*.01&&v_uv0.y<upPos.y*.01){\n      vec2 uv = vec2(1.0/ratioX*(floor(ratioX*v_uv0.x)+.5),1.0/ratioY*(floor(ratioY*v_uv0.y)+.5));\n      o2 = texture2D(texture,uv);\n      o.x=icolorHeight*(floor(colorHeight*o2.x)+halfColorHeight);\n      o.y=icolorHeight*(floor(colorHeight*o2.y)+halfColorHeight);\n      o.z=icolorHeight*(floor(colorHeight*o2.z)+halfColorHeight);\n      o.w=o2.w>0.5?1.0:0.0;\n    }\n    #if USE_NOWHITE\n      if(o.x*o.y*o.z>0.94){\n        o.w = 0.0;\n      }\n    #endif\n  #endif\n    o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_BLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_NOWHITE","type":"boolean","defines":["USE_BLUR"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"outLineWidth","binding":1,"members":[{"name":"upPos","type":14,"count":1},{"name":"downPos","type":14,"count":1},{"name":"powerX","type":13,"count":1},{"name":"powerY","type":13,"count":1},{"name":"colorHeight","type":13,"count":1}],"defines":["USE_BLUR"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Mosaic|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"colorHeight":{"type":13,"value":[256],"editor":{"displayName":"色深","tooltip":"1到256","range":[1,256]}},"powerX":{"type":13,"value":[1],"editor":{"displayName":"马赛克强度X","tooltip":"'powerX',0到100","range":[0,100]}},"powerY":{"type":13,"value":[1],"editor":{"displayName":"马赛克强度Y","tooltip":"'powerY',0到100","range":[0,100]}},"upPos":{"type":14,"value":[100,100],"editor":{"displayName":"马赛克区域右止点"}},"downPos":{"type":14,"value":[0,0],"editor":{"displayName":"马赛克区域左止点"}}}}]}]]],0,0,[],[],[]]