[1,["96CNsWvzBNnY/wmQUzqOst"],["_effectAsset"],[["cc.Material",["_name","_techniqueIndex","_techniqueData"],0],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4],[1,0,1,2,4]],[[[[0,"WaterMat",-1,{"0":{"props":{"alphaThreshold":0.2,"offset":-0.20000000000000004},"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false,"USE_BEZIDER":true}}}]],0,0,[0],[0],[0]],[[[1,"WaterDeformation",[{"hash":788085296,"record":null,"name":"WaterDeformation|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WATER\n  uniform sampler2D deformationTex;\n  uniform Water{\n    vec4 waterColor;\n    float waterWidth;\n    float waterRatio;\n    float ratio;\n  };\n#endif\nfloat getBgAlpha(vec2 uv) {\n  vec4 color_up = texture(texture, uv + vec2(0, waterWidth));\n  vec4 color_down = texture(texture, uv - vec2(0, waterWidth));\n  vec4 color_left = texture(texture, uv - vec2(waterWidth*ratio, 0));\n  vec4 color_right = texture(texture, uv + vec2(waterWidth*ratio, 0));\n  vec4 color_up_left = texture(texture, uv + vec2(waterWidth*ratio, -waterWidth));\n  vec4 color_up_right = texture(texture, uv + vec2(waterWidth*ratio, waterWidth));\n  vec4 color_down_left = texture(texture, uv + vec2(-waterWidth*ratio, -waterWidth));\n  vec4 color_down_right = texture(texture, uv + vec2(-waterWidth*ratio, waterWidth));\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n  #if USE_WATER\n    vec4 offset = vec4(1,1,1,1);\n    vec2 waterUV = v_uv0;\n    float speed = 0.02;\n    float speedY = 0.034;\n    float intageX = floor(cc_time.x*speed);\n    float intageY = floor(cc_time.x*speedY);\n    float timeX = cc_time.x*speed-intageX;\n    float timeY = cc_time.x*speedY-intageY;\n    waterUV.x += timeX;\n    waterUV.y += timeY;\n    if(waterUV.x>1.0){\n      waterUV.x -= 1.0;\n    }else if(waterUV.x<0.0){\n      waterUV.x += 1.0;\n    }\n    if(waterUV.y>1.0){\n      waterUV.y -= 1.0;\n    }else if(waterUV.y<0.0){\n      waterUV.y += 1.0;\n    }\n  vec4 deformationTex_tmp = texture(deformationTex, waterUV);\n  #if CC_USE_ALPHA_ATLAS_deformationTex\n      deformationTex_tmp.a *= texture(deformationTex, waterUV + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    offset.rgb *= (deformationTex_tmp.rgb * deformationTex_tmp.rgb);\n    offset.a *= deformationTex_tmp.a;\n  #else\n    offset *= deformationTex_tmp;\n  #endif\n    offset.y = (offset.y - .5) *waterRatio*ratio;\n    offset.z = (offset.z - 0.65) *waterRatio;\n    vec2 newUV = v_uv0 ;\n    newUV.x += offset.y;\n    newUV.y += offset.z;\n    vec4 color_dest = waterColor * getBgAlpha(newUV);\n    gl_FragColor = color_dest;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WATER\n  uniform sampler2D deformationTex;\n  uniform vec4 waterColor;\nuniform float waterWidth;\nuniform float waterRatio;\nuniform float ratio;\n#endif\nfloat getBgAlpha(vec2 uv) {\n  vec4 color_up = texture2D(texture, uv + vec2(0, waterWidth));\n  vec4 color_down = texture2D(texture, uv - vec2(0, waterWidth));\n  vec4 color_left = texture2D(texture, uv - vec2(waterWidth*ratio, 0));\n  vec4 color_right = texture2D(texture, uv + vec2(waterWidth*ratio, 0));\n  vec4 color_up_left = texture2D(texture, uv + vec2(waterWidth*ratio, -waterWidth));\n  vec4 color_up_right = texture2D(texture, uv + vec2(waterWidth*ratio, waterWidth));\n  vec4 color_down_left = texture2D(texture, uv + vec2(-waterWidth*ratio, -waterWidth));\n  vec4 color_down_right = texture2D(texture, uv + vec2(-waterWidth*ratio, waterWidth));\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n  #if USE_WATER\n    vec4 offset = vec4(1,1,1,1);\n    vec2 waterUV = v_uv0;\n    float speed = 0.02;\n    float speedY = 0.034;\n    float intageX = floor(cc_time.x*speed);\n    float intageY = floor(cc_time.x*speedY);\n    float timeX = cc_time.x*speed-intageX;\n    float timeY = cc_time.x*speedY-intageY;\n    waterUV.x += timeX;\n    waterUV.y += timeY;\n    if(waterUV.x>1.0){\n      waterUV.x -= 1.0;\n    }else if(waterUV.x<0.0){\n      waterUV.x += 1.0;\n    }\n    if(waterUV.y>1.0){\n      waterUV.y -= 1.0;\n    }else if(waterUV.y<0.0){\n      waterUV.y += 1.0;\n    }\n  vec4 deformationTex_tmp = texture2D(deformationTex, waterUV);\n  #if CC_USE_ALPHA_ATLAS_deformationTex\n      deformationTex_tmp.a *= texture2D(deformationTex, waterUV + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    offset.rgb *= (deformationTex_tmp.rgb * deformationTex_tmp.rgb);\n    offset.a *= deformationTex_tmp.a;\n  #else\n    offset *= deformationTex_tmp;\n  #endif\n    offset.y = (offset.y - .5) *waterRatio*ratio;\n    offset.z = (offset.z - 0.65) *waterRatio;\n    vec2 newUV = v_uv0 ;\n    newUV.x += offset.y;\n    newUV.y += offset.z;\n    vec4 color_dest = waterColor * getBgAlpha(newUV);\n    gl_FragColor = color_dest;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_WATER","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_deformationTex","type":"boolean","defines":["USE_WATER"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Water","binding":1,"members":[{"name":"waterColor","type":16,"count":1},{"name":"waterWidth","type":13,"count":1},{"name":"waterRatio","type":13,"count":1},{"name":"ratio","type":13,"count":1}],"defines":["USE_WATER"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"deformationTex","type":29,"count":1,"binding":31,"defines":["USE_WATER"]}]}],[{"passes":[{"program":"WaterDeformation|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"deformationTex":{"value":"white","type":29},"ratio":{"type":13,"value":[1.76667],"editor":{"displayName":"长宽比"}},"waterColor":{"type":16,"value":[1,0,0,1],"editor":{"type":"color","tooltip":"水纹颜色"}},"waterWidth":{"type":13,"value":[0.002],"editor":{"tooltip":"水纹宽度","range":[0,1]}},"waterRatio":{"type":13,"value":[0.002],"editor":{"displayName":"水纹强度","range":[0,0.1]}},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]