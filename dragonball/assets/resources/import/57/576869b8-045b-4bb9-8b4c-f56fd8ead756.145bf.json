[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"LightLoop",[{"hash":3651891081,"record":null,"name":"LightLoop|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_LIGHTLOOP\nuniform LightLoop{\n  vec4 lightColor;\n  float lightRatio;\n  float lightSpace;\n  float speed;\n  float tilt;\n};\nfloat space;\n#endif\n#if USE_CUT\nuniform UseCut{\n  float width;\n};\n#endif\nfloat r;\nfloat g;\nfloat b;\nfloat a;\nvoid main () {\n  float res = 1.0;\n  float tiltDir = 1.0;\n  space = 20.0-lightSpace;\n  r = lightColor.x;\n  g = lightColor.y;\n  b = lightColor.z;\n  #if INVERSE\n    tiltDir = -1.0;\n  #endif\n  #if USE_LIGHTLOOP\n    float time = speed*cc_time.x;\n    float sq = (.5-v_uv0.x)*tiltDir*tilt*.022+(v_uv0.y-.5)*(2.0-tilt*.022);\n    #if ISCIRLE\n      sq = sqrt((.5-v_uv0.x)*(.5-v_uv0.x)*tilt+(v_uv0.y-.5)*(v_uv0.y-.5))*(2.0-tilt);\n    #endif\n    float value = (time+ sq)*space;\n    res = sin(value)*.4;\n  #endif\n  #if USE_CUT\n    res = sin(value)*.4+1.0;\n    float flag = 1.4-width*.01;\n    if(res>flag){\n      res = lightRatio*0.1;\n    }else{\n      res = 0.0;\n    }\n  #endif\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  if(abs(res)>=0.001){\n    o.r += res*(r-o.r);\n    o.g += res*(g-o.g);\n    o.b += res*(b-o.b);\n  }else{\n    o *= v_color;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_LIGHTLOOP\nuniform vec4 lightColor;\nuniform float lightRatio;\nuniform float lightSpace;\nuniform float speed;\nuniform float tilt;\nfloat space;\n#endif\n#if USE_CUT\nuniform float width;\n#endif\nfloat r;\nfloat g;\nfloat b;\nfloat a;\nvoid main () {\n  float res = 1.0;\n  float tiltDir = 1.0;\n  space = 20.0-lightSpace;\n  r = lightColor.x;\n  g = lightColor.y;\n  b = lightColor.z;\n  #if INVERSE\n    tiltDir = -1.0;\n  #endif\n  #if USE_LIGHTLOOP\n    float time = speed*cc_time.x;\n    float sq = (.5-v_uv0.x)*tiltDir*tilt*.022+(v_uv0.y-.5)*(2.0-tilt*.022);\n    #if ISCIRLE\n      sq = sqrt((.5-v_uv0.x)*(.5-v_uv0.x)*tilt+(v_uv0.y-.5)*(v_uv0.y-.5))*(2.0-tilt);\n    #endif\n    float value = (time+ sq)*space;\n    res = sin(value)*.4;\n  #endif\n  #if USE_CUT\n    res = sin(value)*.4+1.0;\n    float flag = 1.4-width*.01;\n    if(res>flag){\n      res = lightRatio*0.1;\n    }else{\n      res = 0.0;\n    }\n  #endif\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  if(abs(res)>=0.001){\n    o.r += res*(r-o.r);\n    o.g += res*(g-o.g);\n    o.b += res*(b-o.b);\n  }else{\n    o *= v_color;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_LIGHTLOOP","type":"boolean","defines":[]},{"name":"USE_CUT","type":"boolean","defines":[]},{"name":"INVERSE","type":"boolean","defines":[]},{"name":"ISCIRLE","type":"boolean","defines":["USE_LIGHTLOOP"]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LightLoop","binding":1,"members":[{"name":"lightColor","type":16,"count":1},{"name":"lightRatio","type":13,"count":1},{"name":"lightSpace","type":13,"count":1},{"name":"speed","type":13,"count":1},{"name":"tilt","type":13,"count":1}],"defines":["USE_LIGHTLOOP"]},{"name":"UseCut","binding":2,"members":[{"name":"width","type":13,"count":1}],"defines":["USE_CUT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"LightLoop|vs|fs","blendState":{"targets":[{"blend":true,"blendSrc":770,"blendDst":771}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"闪光颜色(RBGA)"}},"lightRatio":{"type":13,"value":[7],"editor":{"tooltip":"闪光强度","range":[0,10]}},"lightSpace":{"type":13,"value":[1],"editor":{"tooltip":"闪光间隔(0.1~19.9)","range":[0.1,19.9]}},"speed":{"type":13,"value":[1],"editor":{"tooltip":"闪光流动速度,为负数时方向变换"}},"tilt":{"type":13,"value":[1],"editor":{"tooltip":"闪光倾斜度(0.01~90)","range":[0.01,90]}},"width":{"type":13,"value":[1],"editor":{"tooltip":"闪光宽度(0.0~78.0)","range":[0,78]}}}}]}]]],0,0,[],[],[]]