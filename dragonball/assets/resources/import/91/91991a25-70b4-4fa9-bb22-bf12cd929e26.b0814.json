[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"BlurTest",[{"hash":4011774822,"record":null,"name":"BlurTest|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision lowp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLUR\nuniform BLUR{\n  float blurAmount;\n};\n#endif\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvec4 blur(vec2 uv){\n    float _blurAmount = 0.08 * blurAmount;\n  vec4 blurred = vec4(0.0);\n  for(float i = 0.0; i < 16.0; i ++ ) {\n    vec2 q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + _blurAmount);\n    vec2 uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv).rgba / 2.0;\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + _blurAmount);\n    uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv2).rgba / 2.0;\n  }\n  blurred /= 16.0;\n  return blurred;\n}\nvoid main () {\n  float bightness = 0.5;\n  vec4 o = vec4(dim(blur(v_uv0), bightness));\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision lowp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLUR\nuniform float blurAmount;\n#endif\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec4 dim(vec4 col, float factor) {\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvec4 blur(vec2 uv){\n    float _blurAmount = 0.08 * blurAmount;\n  vec4 blurred = vec4(0.0);\n  for(float i = 0.0; i < 16.0; i ++ ) {\n    vec2 q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + _blurAmount);\n    vec2 uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv).rgba / 2.0;\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + _blurAmount);\n    uv2 = uv + (q * _blurAmount);\n    blurred += texture2D(texture, uv2).rgba / 2.0;\n  }\n  blurred /= 16.0;\n  return blurred;\n}\nvoid main () {\n  float bightness = 0.5;\n  vec4 o = vec4(dim(blur(v_uv0), bightness));\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_BLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"BLUR","binding":1,"members":[{"name":"blurAmount","type":13,"count":1}],"defines":["USE_BLUR"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"layer":0,"passes":[{"program":"BlurTest|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"blurAmount":{"type":13,"value":[0.5],"editor":{"range":[]}}}}]}]]],0,0,[],[],[]]