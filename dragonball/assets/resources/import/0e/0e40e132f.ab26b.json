[1,["85sWPY6qRGRLBIF0tyzlm8"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"OutLine",{"0":{"props":{"width":15},"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false,"USE_OUTLINE":true}}}]],0,0,[0],[0],[0]],[[[1,"OutLine",[{"hash":3425283384,"record":null,"name":"OutLine|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OUTLINE\n  uniform outLineWidth{\n    vec4 maxColor;\n    float width;\n  };\n  float totalWidth;\n#endif\nvoid main () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 o2 = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_OUTLINE\n    totalWidth = width*0.001;\n    vec2 uv = v_uv0;\n    float test = 0.0;\n    float alpha = 0.1;\n    for(int i=-2;i<3;i++){\n      for(int j=-2;j<3;j++){\n        uv = v_uv0;\n        uv.x+=float(i)*totalWidth;\n        uv.y+=float(j)*totalWidth;\n        o2 = texture(texture,uv);\n        if(o2.w<alpha||(uv.x>=1.0||uv.x<=0.0||uv.y>=1.0||uv.y<=0.0)){\n          test+=1.0;\n        }\n      }\n    }\n    if(test>0.0&&test<9.0){\n            o.r = maxColor.r;\n            o.g = maxColor.g;\n            o.b = maxColor.b;\n          }else{\n            o.a = 0.0;\n          }\n    bool flag = test>0.0&&o.a>alpha;\n    #if ONLY_LINE\n      flag = o.a>alpha;\n    #endif\n    if(flag){\n      o.a = test*.15;\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OUTLINE\n  uniform vec4 maxColor;\nuniform float width;\n  float totalWidth;\n#endif\nvoid main () {\n  vec4 o = vec4(1.0,1.0,1.0,1.0);\n  vec4 o2 = vec4(1.0,1.0,1.0,1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_OUTLINE\n    totalWidth = width*0.001;\n    vec2 uv = v_uv0;\n    float test = 0.0;\n    float alpha = 0.1;\n    for(int i=-2;i<3;i++){\n      for(int j=-2;j<3;j++){\n        uv = v_uv0;\n        uv.x+=float(i)*totalWidth;\n        uv.y+=float(j)*totalWidth;\n        o2 = texture2D(texture,uv);\n        if(o2.w<alpha||(uv.x>=1.0||uv.x<=0.0||uv.y>=1.0||uv.y<=0.0)){\n          test+=1.0;\n        }\n      }\n    }\n    if(test>0.0&&test<9.0){\n            o.r = maxColor.r;\n            o.g = maxColor.g;\n            o.b = maxColor.b;\n          }else{\n            o.a = 0.0;\n          }\n    bool flag = test>0.0&&o.a>alpha;\n    #if ONLY_LINE\n      flag = o.a>alpha;\n    #endif\n    if(flag){\n      o.a = test*.15;\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_OUTLINE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"ONLY_LINE","type":"boolean","defines":["USE_OUTLINE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"outLineWidth","binding":1,"members":[{"name":"maxColor","type":16,"count":1},{"name":"width","type":13,"count":1}],"defines":["USE_OUTLINE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"OutLine|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"width":{"type":13,"value":[0.02],"editor":{"tooltip":"描边宽度","range":[0,100]}},"maxColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"最大颜色(RBGA)"}}}}]}]]],0,0,[],[],[]]]]