[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"Breath",[{"hash":4229967911,"record":null,"name":"Breath|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BREATH\n  uniform Breath{\n    vec4 maxColor;\n    vec4 minColor;\n    float speed;\n    float phase;\n    float ratio;\n  };\n#endif\nvoid main () {\n  float a = 1.0;\n  float r = 1.0;\n  float g = 1.0;\n  float b = 1.0;\n  #if USE_BREATH\n    float time = speed*(cc_time.x+phase*.318);\n    float res = maxColor.a-minColor.a;\n    float res1 = maxColor.r-minColor.r;\n    float res2 = maxColor.g-minColor.g;\n    float res3 = maxColor.b-minColor.b;\n    a = (sin(time) + 1.0)*res * .5 + minColor.a;\n    r = (sin(time) + 1.0)*res1* .5 + minColor.r;\n    g = (sin(time) + 1.0)*res2* .5 + minColor.g;\n    b = (sin(time) + 1.0)*res3* .5 + minColor.b;\n  #endif\n  vec4 o = vec4(r,g,b,a);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o*=v_color;\n  #if ADDCOLOR\n    o.r*=(1.0+ratio);\n    o.g*=(1.0+ratio);\n    o.b*=(1.0+ratio);\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BREATH\n  uniform vec4 maxColor;\nuniform vec4 minColor;\nuniform float speed;\nuniform float phase;\nuniform float ratio;\n#endif\nvoid main () {\n  float a = 1.0;\n  float r = 1.0;\n  float g = 1.0;\n  float b = 1.0;\n  #if USE_BREATH\n    float time = speed*(cc_time.x+phase*.318);\n    float res = maxColor.a-minColor.a;\n    float res1 = maxColor.r-minColor.r;\n    float res2 = maxColor.g-minColor.g;\n    float res3 = maxColor.b-minColor.b;\n    a = (sin(time) + 1.0)*res * .5 + minColor.a;\n    r = (sin(time) + 1.0)*res1* .5 + minColor.r;\n    g = (sin(time) + 1.0)*res2* .5 + minColor.g;\n    b = (sin(time) + 1.0)*res3* .5 + minColor.b;\n  #endif\n  vec4 o = vec4(r,g,b,a);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o*=v_color;\n  #if ADDCOLOR\n    o.r*=(1.0+ratio);\n    o.g*=(1.0+ratio);\n    o.b*=(1.0+ratio);\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_BREATH","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"ADDCOLOR","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Breath","binding":1,"members":[{"name":"maxColor","type":16,"count":1},{"name":"minColor","type":16,"count":1},{"name":"speed","type":13,"count":1},{"name":"phase","type":13,"count":1},{"name":"ratio","type":13,"count":1}],"defines":["USE_BREATH"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Breath|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"speed":{"type":13,"value":[3],"editor":{"tooltip":"呼吸速度","range":[0,100]}},"maxColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"最大颜色(RBGA)"}},"minColor":{"type":16,"value":[0,0,0,0],"editor":{"type":"color","tooltip":"最小颜色(RBGA)"}},"phase":{"type":13,"value":[0],"editor":{"tooltip":"相位"}},"ratio":{"type":13,"value":[1],"editor":{"tooltip":"强度"}}}}]}]]],0,0,[],[],[]]